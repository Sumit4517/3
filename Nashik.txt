

******************************************************* DFS BFS *******************************************************************

class Graph:
    def __init__(self):
        self.graph = dict()

    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = [v]
        else:
            self.graph[u].append(v)
        if v not in self.graph:
            self.graph[v] = [u]
        else:
            self.graph[v].append(u)

    def DFS(self, v, visited):
        visited.add(v)
        print(v, end=' ')
        for neighbour in self.graph[v]:
            if neighbour not in visited:
                self.DFS(neighbour, visited)

    def BFS(self, s):
        visited = set()
        queue = [s]
        visited.add(s)
        while queue:
            vertex = queue.pop(0)
            print(vertex, end=" ")
            for neighbour in self.graph[vertex]:
                if neighbour not in visited:
                    queue.append(neighbour)
                    visited.add(neighbour)


g = Graph()

num_edges = int(input("Enter the number of edges: "))
print("Now enter the edges (u v):")
for _ in range(num_edges):
    u, v = map(int, input().split())
    g.add_edge(u, v)

print("Depth First Traversal (enter the starting vertex):")
start_vertex = int(input())
g.DFS(start_vertex, set())

print("\nBreadth First Traversal (enter the starting vertex):")
start_vertex = int(input())
g.BFS(start_vertex)

_____________________________________________________________________________________________
OUTPUT
Enter the number of edges: 5
Now enter the edges (u v):
0 1
0 2
1 2
0 3
2 4
Depth First Traversal (enter the starting vertex):
0
0 1 2 4 3 
Breadth First Traversal (enter the starting vertex):
0
0 1 2 3 4 


Enter the number of edges: 6
Now enter the edges (u v):
0 1
0 2
1 2
1 3
3 4
2 4
Depth First Traversal (enter the starting vertex):
0
0 1 2 4 3 
Breadth First Traversal (enter the starting vertex):
0
0 1 2 3 4 



*********************************************** A STAR *****************************************************

class Node:
    def __init__(self, data, level, fval):
        self.data = data
        self.level = level
        self.fval = fval

    def generate_child(self):
        x, y = self.find(self.data, '_')
        val_list = [[x, y - 1], [x, y + 1], [x - 1, y], [x + 1, y]]
        children = []
        for i in val_list:
            child = self.shuffle(self.data, x, y, i[0], i[1])
            if child is not None:
                child_node = Node(child, self.level + 1, 0)
                children.append(child_node)
        return children

    def shuffle(self, puz, x1, y1, x2, y2):
        if 0 <= x2 < len(self.data) and 0 <= y2 < len(self.data):
            temp_puz = self.copy(puz)
            temp = temp_puz[x2][y2]
            temp_puz[x2][y2] = temp_puz[x1][y1]
            temp_puz[x1][y1] = temp
            return temp_puz
        else:
            return None

    def copy(self, root):
        temp = []
        for i in root:
            t = []
            for j in i:
                t.append(j)
            temp.append(t)
        return temp

    def find(self, puz, x):
        for i in range(0, len(self.data)):
            for j in range(0, len(self.data)):
                if puz[i][j] == x:
                    return i, j


class Puzzle:
    def __init__(self, size):
        self.n = size
        self.open = []
        self.closed = []

    def accept(self):
        puz = []
        for i in range(0, self.n):
            temp = input().split(" ")
            puz.append(temp)
        return puz

    def f(self, start, goal):
        return self.h(start.data, goal) + start.level

    def h(self, start, goal):
        temp = 0
        for i in range(0, self.n):
            for j in range(0, self.n):
                if start[i][j] != goal[i][j] and start[i][j] != '_':
                    temp += 1
        return temp

    def process(self):
        print("Enter the start state matrix \n")
        start = self.accept()
        print("Enter the goal state matrix \n")
        goal = self.accept()
        start = Node(start, 0, 0)
        start.fval = self.f(start, goal)
        self.open.append(start)
        print("\n\n")
        while True:
            cur = self.open[0]
            print("")
            print("  | ")
            print("  | ")
            print(" \\\'/ \n")
            for i in cur.data:
                for j in i:
                    print(j, end=" ")
                print("")
            if self.h(cur.data, goal) == 0:
                break
            for i in cur.generate_child():
                i.fval = self.f(i, goal)
                self.open.append(i)
            self.closed.append(cur)
            del self.open[0]
            self.open.sort(key=lambda x: x.fval, reverse=False)


puz = Puzzle(3)
puz.process()

___________________________________________________________________________________________

OUTPUT

Enter the goal state matrix 

1 2 3
8 _ 4
7 6 5



2 8 3 
1 6 4 
7 _ 5 

2 8 3 
1 _ 4 
7 6 5 

2 8 3 
_ 1 4 
7 6 5 

2 _ 3 
1 8 4 
7 6 5 

_ 2 3 
1 8 4 
7 6 5 

1 2 3 
_ 8 4 
7 6 5 

1 2 3 
8 _ 4 
7 6 5 


****************************************************************** prims algorithm ******************************************************************

import heapq

def prim(graph, start_node):
    mst = set()
    edges = [
        (cost, start_node, to)
        for to, cost in graph[start_node].items()
    ]
    heapq.heapify(edges)

    while edges:
        cost, frm, to = heapq.heappop(edges)
        if to not in mst:
            mst.add(to)
            print(f"Edge: {frm} â†’ {to}, Cost: {cost}")
            for to_next, cost2 in graph[to].items():
                if to_next not in mst:
                    heapq.heappush(edges, (cost2, to, to_next))

# Example usage
num_nodes = int(input("Enter the number of nodes: "))
graph = {}
for i in range(num_nodes):
    node = input(f"Enter node {i+1} name: ")
    graph[node] = {}
    num_neighbours = int(input(f"Enter the number of neighbours for node {node}: "))
    for j in range(num_neighbours):
        neighbour = input(f"Enter neighbour {j+1} name for node {node}: ")
        cost = int(input(f"Enter the cost of edge between node {node} and neighbour {neighbour}: "))
        graph[node][neighbour] = cost

start_node = input("Enter the start node: ")

print("\nMinimum Spanning Tree edges:")
prim(graph, start_node)


***************************************************************KRUSKALS ******************************************************************

class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = []

    def addEdge(self, u, v, w):
        self.graph.append([u, v, w])

    def find(self, parent, i):
        if parent[i] == i:
            return i
        return self.find(parent, parent[i])

    def union(self, parent, rank, x, y):
        xroot = self.find(parent, x)
        yroot = self.find(parent, y)

        if rank[xroot] < rank[yroot]:
            parent[xroot] = yroot
        elif rank[xroot] > rank[yroot]:
            parent[yroot] = xroot
        else:
            parent[yroot] = xroot
            rank[xroot] += 1

    def kruskalMST(self):
        result = []
        i = 0
        e = 0
        self.graph = sorted(self.graph, key=lambda item: item[2])
        parent = []
        rank = []

        for node in range(self.V):
            parent.append(node)
            rank.append(0)

        while e < self.V - 1:
            u, v, w = self.graph[i]
            i = i + 1
            x = self.find(parent, u)
            y = self.find(parent, v)

            if x != y:
                e = e + 1
                result.append([u, v, w])
                self.union(parent, rank, x, y)

        print("Edges in the MST:")
        for u, v, weight in result:
            print(f"{u} -- {v} == {weight}")


if __name__ == "__main__":
    V = int(input("Enter the number of vertices: "))
    g = Graph(V)

    E = int(input("Enter the number of edges: "))
    for _ in range(E):
        u, v, w = map(int, input("Enter the edge (u, v) and its weight w: ").split())
        g.addEdge(u, v, w)

    g.kruskalMST()

___________________________________________________________________________________________________________________

OUTPUT

Enter the number of vertices: 5 
Enter the number of edges: 7
Enter the edge (u, v) and its weight w: 0 1 1
Enter the edge (u, v) and its weight w: 0 2 7
Enter the edge (u, v) and its weight w: 1 2 3
Enter the edge (u, v) and its weight w: 0 4 5
Enter the edge (u, v) and its weight w: 4 3 2
Enter the edge (u, v) and its weight w: 0 3 10
Enter the edge (u, v) and its weight w: 2 3 4
Edges in the MST:
0 -- 1 == 1
4 -- 3 == 2
1 -- 2 == 3
2 -- 3 == 4



****************************************************************************DIJKSTRA*********************************************************************

import heapq

class Graph:
    def __init__(self, V): 
        self.V = V
        self.adj = [[] for _ in range(V)]

    def addEdge(self, u, v, w):
        self.adj[u].append((v, w))


    def shortestPath(self, src):
        pq = []
        heapq.heappush(pq, (0, src))
        dist = [float('inf')] * self.V
        dist[src] = 0

        while pq:
            d, u = heapq.heappop(pq)
            for v, weight in self.adj[u]:
                if dist[v] > dist[u] + weight:
                    dist[v] = dist[u] + weight
                    heapq.heappush(pq, (dist[v], v))

        for i in range(self.V):
            print(f"{i} \t\t {dist[i]}")

if __name__ == "__main__":
    V = int(input("Enter the number of vertices: "))
    g = Graph(V)

    E = int(input("Enter the number of edges: "))
    for _ in range(E):
        u, v, w = map(int, input("Enter the edge (u, v) and its weight w: ").split())
        g.addEdge(u, v, w)

    src = int(input("Enter the source vertex: "))
    g.shortestPath(src)


**************************************************** N queen ************************************************************************************************************

def is_safe(row, col, board):
    for i in range(row):
        if board[i] == col or abs(board[i] - col) == abs(i - row):
            return False
    return True

def solve_n_queens(n, row, board):
    if row == n:
        # Print the board or perform desired action when a solution is found
        for i in range(n):
            for j in range(n):
                print("Q" if board[i] == j else ".", end=" ")
            print()
        print()
        return True

    solution_exists = False

    for col in range(n):
        if is_safe(row, col, board):
            board[row] = col
            solution_exists = solve_n_queens(n, row + 1, board) or solution_exists

    return solution_exists

def main():
    n = int(input("Enter the value of N: "))
    board = [-1] * n  # Initialize the board with all queens initially placed at -1

    if not solve_n_queens(n, 0, board):
        print(f"Solution does not exist for N = {n}")

if __name__ == "__main__":
    main()


**********************************************CHAT BOT*********************************************************************************

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

string getGreeting() {
    vector<string> responses = {"Hello!", "Hi there!", "Hey!", "Nice to see you!", "Hi! How can I help you?"};
    return responses[rand() % responses.size()];
}

string getFarewell() {
    vector<string> responses = {"Goodbye!", "See you later!", "Have a great day!", "Bye!"};
    return responses[rand() % responses.size()];
}

string respond(const string& message) {
    if (message.find("hello") != string::npos || message.find("hey") != string::npos || message.find("hi") != string::npos) {
        return getGreeting();
    } else if (message.find("bye") != string::npos || message.find("see you") != string::npos || message.find("tata") != string::npos) {
        return getFarewell();
    } else if (message.find("how are you?") != string::npos) {
        return "I'm just a bot, but I'm doing well. Thanks for asking!";
    } else if (message.find("your name") != string::npos) {
        return "My name is ChatBot. How can I assist you today?";
    } else {
        return "I'm sorry, I didn't understand that.";
    }
}

int main() {
    cout << "Chatbot: " << getGreeting() << endl;
    while (true) {
        cout << "You: ";
        string user_input;
        getline(cin, user_input);
        if (user_input.empty()) {
            continue;
        }
        transform(user_input.begin(), user_input.end(), user_input.begin(), ::tolower);
        if (user_input.find("bye") != string::npos || user_input.find("see you") != string::npos || user_input.find("tata") != string::npos) {
            cout << "Chatbot: " << getFarewell() << endl;
            break;
        } else {
            cout << "Chatbot: " << respond(user_input) << endl;
        }
    }
    return 0;
}

_____________________________________________________________________________

import random

def greeting():
    responses = ["Hello!", "Hi there!", "Hey!", "Nice to see you!", "Hi! How can I help you?"]
    return random.choice(responses)

def farewell():
    responses = ["Goodbye!", "See you later!", "Have a great day!", "Bye!"]
    return random.choice(responses)

def respond(message):
    if any(word in message.lower() for word in ["hello", "hey", "hi"]):
        return greeting()
    elif any(word in message.lower() for word in ["bye", "see you", "tata"]):
        return farewell()
    elif "how are you?" in message.lower():
        return "I'm just a bot, but I'm doing well. Thanks for asking!"
    elif "your name" in message.lower():
        return "My name is Panda The Chatbot. How can I assist you today?"
    else:
        return "I'm sorry, I didn't understand that."

def main():
    print("Chatbot: " + greeting())
    while True:
        user_input = input("You: ")
        if any(word in user_input.lower() for word in ["bye", "see you", "tata"]):
            print("Chatbot: " + farewell())
            break
        else:
            print("Chatbot: " + respond(user_input))

if __name__ == "__main__":
Â Â Â Â main()

**************************************************************************************************************************************************

